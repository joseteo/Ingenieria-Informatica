/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import civitas.CivitasJuego;
import civitas.Diario;
import civitas.Jugador;
import civitas.OperacionInmobiliaria;
import civitas.OperacionJuego;
import controladorCivitas.Respuesta;
import java.util.ArrayList;
import java.util.Scanner;
import vistaTextualCivitas.VistaTextual;
import javax.swing.JOptionPane;


/**
 *
 * @author teo
 */
public class CivitasView extends javax.swing.JFrame implements Vista {
    CivitasJuego juego;
    int gestionElegida;
    DiarioDialog diarioI;
    JugadorPanel jugadorI;
    /**
     * Creates new form CivitasView
     */
    public CivitasView() {
        initComponents();
        repaint();
        revalidate();
   
        //diarioI = new DiarioDialog(this, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo = new javax.swing.JLabel();
        jugadorPanel = new GUI.JugadorPanel();
        siguienteoperacion = new javax.swing.JLabel();
        siguienteOperacionV = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Titulo.setText("Titulo");

        siguienteoperacion.setText("Siguiente operacion");

        siguienteOperacionV.setText("SiguienteOperacion");
        siguienteOperacionV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteOperacionVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(siguienteoperacion)
                .addGap(18, 18, 18)
                .addComponent(siguienteOperacionV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(469, Short.MAX_VALUE))
            .addComponent(jugadorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1140, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(siguienteoperacion)
                        .addComponent(siguienteOperacionV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jugadorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void siguienteOperacionVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteOperacionVActionPerformed
        siguienteOperacionV.setText(juego.siguientePaso().toString());
    }//GEN-LAST:event_siguienteOperacionVActionPerformed

    
    
    public void setCivitasJuego(CivitasJuego j){
        juego=j;
        setVisible(true);
    }
    
//    private static String separador = "=====================";
//
//    private Scanner in;
//
//    private Respuesta respuestas;
//    private int iPropiedad;
//    private int iGestion;

//    public VistaTextual (CivitasJuego juego) {
//      in = new Scanner (System.in);
//
//      this.juego=juego;
//    }
    @Override
     public void actualiza(){
        jugadorPanel.setJugador(juego.getJugadorActual());
        repaint();
        revalidate();
       
    }
   


    public void pausa() {
//      System.out.print ("\nPulsa una tecla");
//      in.nextLine();
        int val=JOptionPane.showConfirmDialog(null, "¿Continuar?", "Siguiente paso", JOptionPane.YES_NO_OPTION);
        if (val==1) 
            System.exit(0);
    }
//
//    int leeEntero (int max, String msg1, String msg2) {
//      Boolean ok;
//      String cadena;
//      int numero = -1;
//      do {
//        System.out.print (msg1);
//        cadena = in.nextLine();
//        try {  
//          numero = Integer.parseInt(cadena);
//          ok = true;
//        } catch (NumberFormatException e) { // No se ha introducido un entero
//          System.out.println (msg2);
//          ok = false;  
//        }
//        if (ok && (numero < 0 || numero >= max)) {
//          System.out.println (msg2);
//          ok = false;
//        }
//      } while (!ok);
//
//      return numero;
//    }

//    int menu (String titulo, ArrayList<String> lista) {
//      String tab = "  ";
//      int opcion;
//      System.out.println (titulo);
//      for (int i = 0; i < lista.size(); i++) {
//        System.out.println (tab+i+"-"+lista.get(i));
//      }
//
//      opcion = leeEntero(lista.size(),
//                            "\n"+tab+"Elige una opción: ",
//                            tab+"Valor erróneo");
//      return opcion;
//    }

      /**
       *
       * @return
       */
      @Override
    public Respuesta comprar(){
//          int opcion;
//          ArrayList<String>resp=new ArrayList<>();
//          resp.add("SI");
//          resp.add("NO");
//          opcion = menu("¿quiere comprar?",resp);
//        switch (opcion) {
//            case 0:
//                return Respuesta.NO;
//            case 1:
//                return Respuesta.SI;
//            default:
//                return null;
//        }
      int opcion= 1-JOptionPane.showConfirmDialog(null, "¿Quieres comprar la calle actual?", "Compra", JOptionPane.YES_NO_OPTION);
      if(opcion ==0 ){
          return Respuesta.NO;
      }else{
          return Respuesta.SI;
      }
    }


    //Metodos Vistas
   

      /**
       *
       * @return
       */
      @Override
    public OperacionInmobiliaria elegirOperacion(){
//        int opcion;
//        ArrayList<String>resp=new ArrayList<>();
//        resp.add("Construir Casa");
//        resp.add("Construir Hotel");
//        resp.add("Terminar");
//
//        opcion = menu("¿Que operación inmobiliaria quiere realizar",resp);
//        switch (opcion) {
//            case 0:
//                System.out.println("Voy a construir una casa");
//                return OperacionInmobiliaria.CONSTRUIR_CASA;
//
//            case 1:
//                System.out.println("voy a construir un hotel");
//                return OperacionInmobiliaria.CONSTRUIR_HOTEL;
//
//            case 2:
//                System.out.println("Le has dado a terminar");
//                return OperacionInmobiliaria.TERMINAR;
//            default:
//                return null;
//        }
        GestionarDialog gestionarD= new GestionarDialog(this,true); //crea la ventana del diario
        int opcion = gestionarD.getGestion();
        switch (opcion) {
            case 0:
                System.out.println("Voy a construir una casa");
                return OperacionInmobiliaria.CONSTRUIR_CASA;

            case 1:
                System.out.println("voy a construir un hotel");
                return OperacionInmobiliaria.CONSTRUIR_HOTEL;

            case 2:
                System.out.println("Le has dado a terminar");
                return OperacionInmobiliaria.TERMINAR;
            default:
                return null;
        }
    }
    //revisar en clase...

      /**
       *
       * @return
       */
    @Override
    public int elegirPropiedad(){
//        int numJug=juego.getIndiceJugadorActual();
//        Jugador jug = this.juego.getJugadores().get(numJug);
//        ArrayList<String> propiedadesJugador = new ArrayList<>();
//        for(int i=0;i<jug.getPropiedades().size();i++){
//            propiedadesJugador.add(jug.getPropiedades().get(i).getNombre());
//        }
//        String comparacion;
//        int opcion =menu("Elige la propiedad a gestionar: ", propiedadesJugador);
//        System.out.println("Imprime la opcion");
//        System.out.println(opcion);
//        comparacion =propiedadesJugador.get(opcion);
//        for(int j=1;j<jug.getPropiedades().size();j++){
//
//            System.out.println(jug.getPropiedades().get(j).getNombre());
//            String comp=jug.getPropiedades().get(j).getNombre();
//            if(comparacion == comp){
//                opcion = j;
//                j=jug.getPropiedades().size()-1;
//            }
//
//        }
        PropiedadDialog propiedadD= new PropiedadDialog(this,true,juego.getJugadorActual()); //crea la ventana del diario
        int opcion = propiedadD.getPropiedad();
        return opcion;
    }

      /**
       *
       * @param operacion
       */
      @Override
    public void mostrarSiguienteOperacion(OperacionJuego operacion){
        System.out.println(operacion);
        if(operacion == OperacionJuego.AVANZAR){
            Dado.createInstance(this);
            siguienteOperacionV.setText(operacion.toString());
            
        }else{
            siguienteOperacionV.setText(operacion.toString());
        }
    }

      /**
       *
       */
      @Override
    public void mostrarEventos(){
        if (!Diario.getInstance().getEventos().isEmpty()){
            DiarioDialog diarioD= new DiarioDialog(this,true); //crea la ventana del diario
        }
    }

    public void mostrarEstado(){
        if(!this.juego.finalDelJuego()){
            int numC = this.juego.getJugadores().get(this.juego.getIndiceJugadorActual()).getCasillaActual();

            System.out.println(this.juego.getJugadores().get(this.juego.getIndiceJugadorActual()));
        }else{
            this.juego.ranking();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private GUI.JugadorPanel jugadorPanel;
    private javax.swing.JTextField siguienteOperacionV;
    private javax.swing.JLabel siguienteoperacion;
    // End of variables declaration//GEN-END:variables
}
